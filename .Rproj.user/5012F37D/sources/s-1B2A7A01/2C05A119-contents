#' Generate Summary Table for Fitted Generalized Linear Model (GLM)
#'
#' Creates table summarizing a GLM fit using the \code{\link[stats]{glm}}
#' function.
#'
#'
#' @inherit tabmeans references
#' @inheritSection tabmeans Note
#' @inheritParams tabmeans
#'
#'
#' @param fit Object returned from \code{\link[stats]{glm}}.
#'
#' @param columns Character vector specifying what columns to include. Choices
#' for each element are \code{"n"}, \code{"events"} (for binary outcomes),
#' \code{"beta"}, \code{"se"}, \code{"beta.se"}, \code{"beta.betaci"},
#' \code{"betaci"}, \code{"or"}, \code{"or.orci"}, \code{"orci"}, \code{"test"}
#' (for z/t test statistic), and \code{"p"}.
#'
#' @param xlabels Character vector with labels for the \code{x} variables and
#' their levels. Often useful to leave as \code{NULL} first, see how the table
#' looks, and then re-run with labels where they need to be.
#'
#' @param compress.factors Logical value for whether to display factor variables should
#' as one row for each of the non-reference group levels, as opposed to one row
#' for the variable name and one row for each of the levels including the
#' reference group.
#'
#'
#' @return Character matrix summarizing the fitted GLM.
#'
#'
#' @examples
#' # Load in sample dataset d and drop rows with missing values
#' data(tabdata)
#' tabdata <- tabdata[complete.cases(tabdata), ]
#'
#' # Linear regression: BMI vs. age, sex, race, and treatment
#' glmfit1 <- glm(BMI ~ Age + Sex + Race + Group, data = tabdata)
#' (lintable <- tabglm(fit = glmfit1))
#'
#' # Logistic regression: 1-year mortality vs. age, sex, race, and treatment.
#' # Display factors in "compressed" format
#' glmfit2 <- glm(death_1yr ~ Age + Sex + Race + Group, data = tabdata,
#'                family = binomial)
#' (logtable1 <- tabglm(fit = glmfit2, compress.factors = TRUE))
#'
#' # Logistic regression with higher-order terms
#' glmfit3 <- glm(death_1yr ~ poly(Age, 2, raw = TRUE) + Sex + BMI + Sex * BMI,
#'                data = tabdata, family = "binomial")
#' (logtable2 <- tabglm(fit = glmfit3))
#'
#'
#' @export
tabglm <- function(fit, columns = NULL, xlabels = NULL,
                   compress.factors = FALSE, sep.char = ", ",
                   format.latex = FALSE, decimals = 2, p.decimals = c(2, 3),
                   p.cuts = 0.01, p.lowerbound = 0.001, p.leading0 = TRUE,
                   p.avoid1 = FALSE, bold.colnames = TRUE,
                   variable.colname = "Variable", print.html = FALSE,
                   html.filename = "table1.html") {

  # Extract info from fit
  summary.fit <- summary(fit)
  coefmat <- summary.fit$coefficients
  rownames.coefmat <- rownames(coefmat)
  betas <- coefmat[, "Estimate"]
  ses <- coefmat[, "Std. Error"]
  ps <- coefmat[, 4]
  df <- fit$df.residual
  intercept <- rownames.coefmat[1] == "(Intercept)"
  glm.fam <- fit$family$family
  glm.link <- fit$family$link

  # Default columns to include depending on family of GLM
  if (is.null(columns)) {
    if (glm.fam == "binomial" & glm.link == "logit") {
      columns <- c("beta.se", "or.orci", "p")
    } else {
      columns <- c("beta.se", "p")
    }
  }

  # Determine whether xlabels has to be created
  create.xlabels <- is.null(xlabels)

  # Determine whether there are factors, interactions, or polynomials
  fit.xlevels <- fit$xlevels
  x.factors <- names(fit.xlevels)
  factors <- length(x.factors) > 0

  interaction.rows <- grep(pattern = ":", x = rownames.coefmat)
  interactions <- length(interaction.rows) > 1

  polynomial.rows <- grep(pattern = "poly(", x = rownames.coefmat, fixed = TRUE)
  polynomials <- length(polynomial.rows) > 0

  # If necessary, force compress.factors to be TRUE and notify user of reason
  if (interactions & ! compress.factors) {
    message("The 'compress.factors' input is being switched to TRUE because the fitted GLM includes interaction terms. This limitation may be addressed in future versions of 'tabgee'.")
    compress.factors <- TRUE
  }

  # Determine row indices for table entries and create xlabels vector
  if (compress.factors) {

    # Compressed factor formatting

    # All rows of table have entries
    ref.rows <- c()
    entry.rows <- 1: nrow(coefmat)

    # Create xlabels
    if (create.xlabels) {

      # Start with row names
      if (intercept) {
        xlabels <- c("Intercept", rownames.coefmat[-1])
      } else {
        xlabels <- rownames.coefmat
      }

      # Clean up polynomials
      if (polynomials) {

        for (ii in polynomial.rows) {
          xlabel.parts <- unlist(strsplit(x = xlabels[ii], split = ","))
          varname.ii <- substring(xlabel.parts[1], first = 6)
          poly.order <- as.numeric(substring(xlabel.parts[3],
                                             first = nchar(xlabel.parts[3])))
          if (poly.order == 1) {
            xlabels[ii] <- varname.ii
          } else if (poly.order == 2) {
            xlabels[ii] <- paste(varname.ii, "squared")
          } else if (poly.order == 3) {
            xlabels[ii] <- paste(varname.ii, "cubed")
          } else {
            xlabels[ii] <- paste(varname.ii, poly.order, sep = "^")
          }
        }

      }

      # Clean up factors
      if (factors) {
        for (ii in 1: length(x.factors)) {
          xlabels <- unlist(lapply(xlabels, function(x)
            gsub(pattern = x.factors[ii], replacement = "", x = x)))
        }
      }

      # Clean up interactions
      if (interactions) {
        for (ii in 1: length(x.factors)) {
          xlabels[interaction.rows] <-
            unlist(lapply(xlabels[interaction.rows], function(x)
              gsub(pattern = x.factors[ii], replacement = "", x = x)))
        }
      }

    }

  } else {

    # Expanded factor formatting
    rowcount <- ifelse(intercept, 1, 0)
    entry.rows <- rowcount
    ref.rows <- c()
    if (create.xlabels & intercept) {
      xlabels <- "Intercept"
    }
    for (ii in 1:
         length(unlist(strsplit(x = deparse(fit$call, width.cutoff = 500),
                                split = "+", fixed = TRUE)))) {

      rowcount <- rowcount + 1
      varname.ii <- deparse(fit$terms[ii][[3]])
      if (substr(varname.ii, 1, 4) == "poly") {

        # Clean up polynomial
        varname.ii.split <-
          unlist(strsplit(substr(varname.ii, start = 6, stop = 100), split = ","))
        varname.ii <- varname.ii.split[1]
        poly.order <- as.numeric(varname.ii.split[2])
        if (create.xlabels) {
          if (poly.order == 1) {
            xlabels[rowcount] <- varname.ii
          } else if (poly.order == 2) {
            xlabels[rowcount: (rowcount + 1)] <-
              c(varname.ii, paste(varname.ii, "squared"))
          } else if (poly.order == 3) {
            xlabels[rowcount: (rowcount + 2)] <-
              c(varname.ii, paste(varname.ii, c("squared", "cubed")))
          } else {
            xlabels[rowcount: (rowcount + poly.order - 1)] <-
              c(varname.ii, paste(varname.ii, 2: poly.order, sep = "^"))
          }
        }
        entry.rows <- c(entry.rows, rowcount: (rowcount + poly.order - 1))
        rowcount <- rowcount + poly.order - 1

      } else if (varname.ii %in% x.factors) {

        # Clean up factor
        levels.ii <- as.character(unlist(fit$xlevels[varname.ii]))
        nlevels.ii <- length(levels.ii)
        new.entries <- (rowcount + 1): (rowcount + nlevels.ii)
        if (create.xlabels) {
          xlabels[rowcount] <- varname.ii
          xlabels[new.entries] <- levels.ii
        }
        xlabels[new.entries] <-
          paste("  ", xlabels[new.entries], sep = "")
        xlabels[rowcount + 1] <- paste(xlabels[rowcount + 1], "(ref)")
        entry.rows <- c(entry.rows, (rowcount + 2): (rowcount + nlevels.ii))
        ref.rows <- c(ref.rows, rowcount + 1)
        rowcount <- rowcount + nlevels.ii

      } else {

        entry.rows <- c(entry.rows, rowcount)
        if (create.xlabels) {
          xlabels[rowcount] <- varname.ii
        }

      }
    }
  }

  # Initialize table
  tbl <- matrix(xlabels, ncol = 1, dimnames = list(NULL, variable.colname))
  nrows <- nrow(tbl)

  # Convert decimals to variable for sprintf
  spf <- paste("%0.", decimals, "f", sep = "")

  # Loop through column input and add each
  for (ii in 1: length(columns)) {

    column.ii <- columns[ii]

    if (column.ii == "n") {

      # N
      newcol <- matrix(c(length(fit$residuals), rep("", nrows - 1)),
                       ncol = 1, dimnames = list(NULL, "N"))

    } else if (column.ii == "events") {

      # Events
      newcol <- matrix(c(sum(fit$model[, 1]), rep("", nrows - 1)),
                       ncol = 1, dimnames = list(NULL, "Events"))

    } else if (column.ii == "beta") {

      # Beta
      newcol <- matrix("", ncol = 1, nrow = nrows,
                        dimnames = list(NULL, "Beta"))
      newcol[entry.rows, 1] <- sprintf(spf, betas)
      newcol[ref.rows, 1] <- "-"

    } else if (column.ii == "se") {

      # SE
      newcol <- matrix("-", ncol = 1, nrow = nrows, dimnames = list(NULL, "SE"))
      newcol[entry.rows, 1] <- sprintf(spf, ses)
      newcol[ref.rows, 1] <- "-"

    } else if (column.ii == "beta.se") {

      # Beta (SE)
      newcol <- matrix("", ncol = 1, nrow = nrows,
                       dimnames = list(NULL, "Beta (SE)"))
      newcol[entry.rows, 1] <-
        paste(sprintf(spf, betas), " (", sprintf(spf, ses), ")", sep = "")
      newcol[ref.rows, 1] <- "-"

    } else if (column.ii == "beta.betaci") {

      # Beta (95% CI)
      ci.fit <- confint(fit)
      newcol <- matrix("", ncol = 1, nrow = nrows,
                       dimnames = list(NULL, "Beta (95% CI)"))
      newcol[entry.rows, 1] <-
        paste(sprintf(spf, betas), " (",
              sprintf(spf, ci.fit[, 1]), sep.char,
              sprintf(spf, ci.fit[, 2]), ")", sep = "")
      newcol[ref.rows, 1] <- "-"

    } else if (column.ii == "betaci") {

      # 95% CI for Beta
      ci.fit <- confint(fit)
      newcol <- matrix("", ncol = 1, nrow = nrows,
                       dimnames = list(NULL, "95% CI for Beta"))
      newcol[entry.rows, 1] <- paste(sprintf(spf, ci.fit[, 1]), sep.char,
                                     sprintf(spf, ci.fit[, 2]), sep = "")
      newcol[ref.rows, 1] <- "-"

    } else if (column.ii == "or") {

      # OR
      newcol <- matrix("", ncol = 1, nrow = nrows, dimnames = list(NULL, "OR"))
      newcol[entry.rows, 1] <- sprintf(spf, exp(betas))
      if (intercept) {
        newcol[1, 1] <- "-"
      }
      newcol[ref.rows, 1] <- "-"

    } else if (column.ii == "or.orci") {

      # OR (95% CI)
      ci.fit <- confint(fit)
      newcol <- matrix("-", ncol = 1, nrow = nrows,
                       dimnames = list(NULL, "OR (95% CI)"))
      newcol[entry.rows, 1] <-
        paste(sprintf(spf, exp(betas)), " (",
              sprintf(spf, exp(ci.fit[, 1])), sep.char,
              sprintf(spf, exp(ci.fit[, 2])), ")", sep = "")
      if (intercept) {
        newcol[1, 1] <- "-"
      }
      newcol[ref.rows, 1] <- "-"

    } else if (column.ii == "orci") {

      # 95% CI for OR
      ci.fit <- confint(fit)
      newcol <- matrix("-", ncol = 1, nrow = nrows,
                       dimnames = list(NULL, "95% CI for OR"))
      newcol[entry.rows, 1] <-
        paste(sprintf(spf, exp(ci.fit[, 1])), sep.char,
              sprintf(spf, exp(ci.fit[, 2])), sep = "")
      if (intercept) {
        newcol[1, 1] <- "-"
      }
      newcol[ref.rows, 1] <- "-"

    } else if (column.ii == "test") {

      # t or z
      newcol <-
        matrix("-", ncol = 1, nrow = nrows,
               dimnames = list(NULL, substr(colnames(coefmat)[3],
                                            start = 1, stop = 1)))
      newcol[entry.rows, 1] <- sprintf(spf, coefmat[, 3])
      newcol[ref.rows, 1] <- "-"

    } else if (column.ii == "p") {

      # P
      newcol <- matrix("", ncol = 1, nrow = nrows, dimnames = list(NULL, "P"))
      newcol[entry.rows, 1] <-
        formatp(p = ps, cuts = p.cuts, decimals = p.decimals,
                lowerbound = p.lowerbound, leading0 = p.leading0,
                avoid1 = p.avoid1)
      newcol[ref.rows, 1] <- "-"

    }

    # Add column to table
    tbl <- cbind(tbl, newcol)

  }

  # Reformat for xtable if necessary
  if (format.latex) {
    tbl[tbl == "-"] <- "--"
    tbl[, 1] <- gsub(pattern = "  ", replacement = "$\\hskip .4cm$",
                     x = tbl[, 1], fixed = TRUE)
    if (bold.colnames) {
      colnames(tbl) <- paste("$\\textbf{", colnames(tbl), "}$", sep = "")
    }
  }

  # Print html version of table if requested
  if (print.html) {

    tbl[tbl == "--"] <- "-"
    tbl.xtable <-
      xtable(tbl, align = paste("ll",
                                paste(rep("r", ncol(tbl) - 1), collapse = ""),
                                sep = "", collapse = ""))
    print(tbl.xtable, include.rownames = FALSE, type = "html",
          file = html.filename, sanitize.text.function = function(x) {
            ifelse(substr(x, 1, 1) == " ", paste("&nbsp &nbsp", x), x)
          })

  }

  # Return tbl
  return(tbl)

}
