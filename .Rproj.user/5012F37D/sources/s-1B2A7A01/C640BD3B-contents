---
title: "Summary Tables with 'tab' Package"
author: "Dane Van Domelen"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
bibliography: bibliography.bib
nocite: | 
  @Kmisc, 
  @knitr1,
  @pander,
  @survival-package, 
  @survival-book,
  @xtable
#csl: american-medical-association-alphabetical.csl
vignette: >
  %\VignetteIndexEntry{Summary Tables with 'tab' Package}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)

# Load packages
library("xtable")

# Set xtable options
options("xtable.caption.placement" = "top", 
        "xtable.include.rownames" = TRUE, 
        "xtable.comment" = FALSE)
```

## 'tab' package

The purpose of **tab** is to make it easier to create tables for papers, including Table 1's showing characteristics of the sample and summary tables for fitted regression models. Currently, the following functions are included:

* `tabmeans` compares means in two or more groups.
* `tabmedians` compares medians in two or more groups.
* `tabfreq` compares frequencies in two or more groups. 
* `tabmulti` compares multiple variables in two or more groups.
* `tabglm` summarizes a generalized linear model (GLM) fit via `glm`. 
* `tabgee` summarizes a generalized estimating equation (GEE) fit via `gee`. 
* `tabcox` summarizes a Cox Proportional Hazards (Cox PH) model fit via `coxph` in **survival**. 


## Creating a Table 1

A toy dataset called `tabdata` is included in the **tab package**. It is a data frame with 15 variables and 300 observations. Let's take a look:

```{r toydata, message = FALSE}
library("tab")
data(tabdata)
dim(tabdata)
head(tabdata)
```

Here is how you can use `tabmulti` to generate a Table 1 comparing characteristics of the treatment and control groups.

```{r table1a, message = FALSE}
(table1 <- tabmulti(data = tabdata, 
                    xvarname = "Group", 
                    yvarnames = c("Age", "Sex", "Race")))
```

`tabmulti` created a character matrix, but it doesn't look like a table yet. If you want to get the table into Word, here are two approaches:

1. Install/load **Kmisc** and run `write.cb(table1)` to copy the table to your clipboard. Paste the result into Word, then highlight the text and go to `Insert -> Table -> Convert Text to Table... OK`. 

2. Add `print.html = TRUE` to the above `tabmulti` function call. That will result in a .html file being written to your working directory. It should appear as a neat table when you open it (e.g. in Google Chrome), and you can copy/paste it into Word. 

If you want it to display it in your automated report, you can add `format.latex = TRUE` and then use **knitr**'s `kable` function. Here, with a caption and right-aligned values:

```{r table1b, message = FALSE}
table1 <- tabmulti(data = tabdata, 
                   xvarname = "Group", 
                   yvarnames = c("Age", "Sex", "Race"), 
                   format.latex = TRUE)
library("knitr")
kable(table1,
      caption = "Table 1a. Characteristics of sample (created by `tabmulti` and `kable`).", 
      align = 'lrrr')
```

If you prefer the **xtable** function/package, that can work as well (you have to add `results = "asis"` as a chunk option):

```{r table1c, results = "asis", message = FALSE}
library("xtable")
print(xtable(table1, 
             caption = "Table 1b. Characteristics of sample (created by `tabmulti` and `xtable`).", 
             align = 'llrrr',), 
      type = "html", 
      include.rownames = FALSE)
```

Or, with the `pandoc.table` function in **pander** (also requires `results = "asis"`):

```{r table1d, results = "asis", message = FALSE}
library("pander")
pandoc.table(table1, 
             caption = "Table 1c. Characteristics of sample (created by `tabmulti` and `pandoc.table`).", 
             style = "rmarkdown", 
             justify = 'lrrr', 
             split.tables = Inf)
```


## More on 'tabmulti'

Recall the `tabmulti` function call from above:

```{r tabmulti1, eval = FALSE, message = FALSE}
table1 <- tabmulti(data = tabdata, 
                   xvarname = "Group", 
                   yvarnames = c("Age", "Sex", "Race"), 
                   format.latex = TRUE)
```

I specified the data frame, the name of the group variable, and the names of the variables I wanted to compare. By default, `tabmulti` treats each Y variable as continuous if it is numeric and takes on 5 or more unique values, and categorical otherwise. It compares means for continuous variables and frequencies for categorical variables.

Internally, `tabmulti` called `tabmeans` for the first comparison and `tabfreq` for the second and third. We could have created the same table using these functions and `rbind`:

```{r tabmulti2, message = FALSE}
table1b <- rbind(tabmeans(x = tabdata$Group, y = tabdata$Age, format.latex = TRUE), 
                 tabfreq(x = tabdata$Group, y = tabdata$Sex, format.latex = TRUE), 
                 tabfreq(x = tabdata$Group, y = tabdata$Race, format.latex = TRUE))
all(table1 == table1b)
```

Let's go through some more options. The `columns` input controls what columns are shown, with the default `columns = c("xgroups", "p")` requesting a column for each `x` level and a p-value column. Since we have missing values and `tabmulti` uses pairwise deletion by default, let's add a sample size column, and why not also throw in a column for the overall sample statistics. 

```{r tabmulti3, message = FALSE}
table1 <- tabmulti(data = tabdata, 
                   xvarname = "Group", 
                   yvarnames = c("Age", "Sex", "Race"),
                   columns = c("n", "overall", "xgroups", "p"),
                   format.latex = TRUE)
kable(table1, 
      caption = "Table 1d. Characteristics of sample.", 
      align = 'lrrrrr')
```

For age, often the range is more informative than the SD. We can display M (min-max) rather than M (SD) but setting the `tabmeans` input `parenth = "sd"`. To pass this argument through `tabmulti`, we use the `means.list` argument:

```{r tabmulti4, message = FALSE}
table1 <- tabmulti(data = tabdata, 
                   xvarname = "Group", 
                   yvarnames = c("Age", "Sex", "Race"),
                   columns = c("n", "overall", "xgroups", "p"),
                   means.list = list(parenth = "minmax"),
                   format.latex = TRUE)
kable(table1, 
      caption = "Table 1e. Characteristics of sample.", 
      align = 'lrrrrr')
```

Technically the range is the difference between the min and the max, not the min and the max, but if you prefer the label `"M (range)"`, you could specify the `text.label` input: `means.list = list(parenth = "minmax", text.label = "M (range)")`.

These are some of the options you have access to with `tabmulti` and the underlying functions it calls. A complete list of options are described in the help files for `tabmulti`, `tabmeans`, `tabmedians`, and `tabfreq`. The help files also have some different examples.


## Regression summaries

### Linear regression

Suppose we want to summarize a linear regression of BMI on age, sex, race, and treatment group. You could use `kable`, `xtable`, or `pandoc.table` to print a summary table like this:

```{r linreg1, results = "asis"}
fit <- glm(BMI ~ Age + Sex + Race + Group, data = tabdata)
print(xtable(fit, 
             caption = "Table 2a. Linear regression fit (created by `xtable`)."), 
      type = "html")
```

But this isn't how a regression table in a paper typically looks. A few issues:

* P-value column should have a simpler heading.
* P-values should not print as 0. 
* For factor variables, levels should be printed more cleanly.

Let's try `tabglm`:

```{r linreg2}
table2 <- tabglm(fit = fit, 
                 format.latex = TRUE)
kable(table2, 
      caption = "Table 2b. Linear regression fit (created by `tabglm` and `kable`).", 
      align = 'lrr')
```

If you don't like all the white space, you can set `compress.factors = TRUE` to omit rows with factor variable names (and left-align factor levels). By default, the input `omit.refgroups` has the same value as `compress.factors`, and `omit.refgroups = TRUE` omits reference group rows.

```{r linreg3, eval = TRUE}
table2 <- tabglm(fit = fit, 
                 compress.factors = TRUE,
                 format.latex = TRUE)
kable(table2, 
      caption = "Table 2c. Linear regression fit (created by `tabglm` and `kable`).", 
      align = 'lrr')
```

Maybe you're submitting to one of those enlightened journals that thinks comparing confidence intervals to 0 is totally different than comparing p-values to 0.05. `tabglm` can do confidence intervals.

```{r linreg4, eval = TRUE}
table2 <- tabglm(fit = fit, 
                 columns = c("beta.se", "betaci"),
                 compress.factors = TRUE,
                 format.latex = TRUE)
kable(table2, 
      caption = "Table 2d. Linear regression fit (created by `tabglm` and `kable`).", 
      align = 'lrr')
```

### Logistic regression

Summarizing a fitted logistic regression model with `tabglm` is very similar. For 1-year mortality vs. age, age squared, sex, race, and treatment group:

```{r logreg1, eval = TRUE}
fit <- glm(death_1yr ~ poly(Age, 2, raw = TRUE) + Sex + Race + Group, 
           data = tabdata, family = "binomial")
table3 <- tabglm(fit = fit, 
                 compress.factors = "binary", 
                 format.latex = TRUE)
kable(table3, 
      caption = "Table 3. Logistic regression fit (created by `tabglm` and `kable`).", 
      align = 'lrrr')
```

Notice that the second-order term was labeled appropriately, and `tabglm` recognized `fit` as a logistic regression and thus by default added a OR (95% CI) column. Additionally, the binary Sex and Group variables was displayed as single rows, while the other factor variable, Race, was shown in a more expanded format. This was the result of setting `compress.factors = "binary"` (`compress.factors` can be `TRUE`, `FALSE`, or `"binary"`).

### GEEs

To summarize a fitted GEE, we can convert `tabdata` from wide to long format, fit a GEE, and then call `tabgee`. Here's a table for blood pressure vs. age, sex, race, BMI, and treatment group, with columns for Beta, SE, Z, and P:

```{r gee1, eval = TRUE, message = FALSE}
tabdata2 <- reshape(data = tabdata,
                    varying = c("bp.1", "bp.2", "bp.3", "highbp.1",
                                "highbp.2", "highbp.3"),
                    timevar = "bp.visit", 
                    direction = "long")
tabdata2 <- tabdata2[order(tabdata2$id), ]
fit <- gee(bp ~ Age + Sex + Race + BMI + Group, 
           id = id, 
           data = tabdata2,
           corstr = "unstructured")
table4 <- tabgee(fit = fit, 
                 columns = c("beta", "se", "z", "p"),
                 compress.factors = "binary", 
                 data = tabdata2, 
                 format.latex = TRUE)
kable(table4, 
      caption = "Table 4. Cox PH fit (created by `tabgee` and `kable`).", 
      align = 'lrrr')
```

### Cox PH

And finally, to summarize a fitted Cox PH model for survival vs. covariates, with default settings:

```{r coxph1, eval = TRUE}
tabdata <- tabdata[complete.cases(tabdata), ]
fit <- coxph(Surv(time = tabdata$time, event = tabdata$delta) ~ 
               Age + Sex + Race + Group, 
             data = tabdata)
table5 <- tabcox(fit = fit, 
                 format.latex = TRUE)
kable(table5, caption = "Table 5. Cox PH fit (created by `tabcox` and `kable`).", align = 'lrrr')
```


## References
